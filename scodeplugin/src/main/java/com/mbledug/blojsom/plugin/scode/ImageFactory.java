/**
 * Copyright (c) 2004-2007, Cliffano Subagio
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Studio Cliffano nor the names of its contributors
 *     may be used to endorse or promote products derived from this software
 *     without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package com.mbledug.blojsom.plugin.scode;

import java.awt.image.BufferedImage;
import java.io.Serializable;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.mbledug.blojsom.plugin.scode.engine.ImageEngine;
import com.mbledug.blojsom.plugin.scode.engine.SimpleImageEngine;

/**
 * {@link ImageFactory} creates a captcha image with a text drawn on it.
 * The image is based on the specified flavor.
 * @author Cliffano Subagio
 */
public class ImageFactory implements Serializable {

    /**
     * Serial version UID.
     */
    private static final long serialVersionUID = 5349875348734357443L;

    /**
     * Log for {@link ImageFactory}.
     */
    private static final Log LOG = LogFactory.getLog(ImageFactory.class);

    /**
     * The available image mEngines.
     */
    private Map mEngines;

    /**
     * Constructor with non-null image engines.
     * @param engines Map of image engines
     */
    public ImageFactory(final Map engines) {
        if (engines == null) {
            throw new IllegalArgumentException(
                    "Image engines must be provided.");
        } else {
            mEngines = engines;
        }
    }

    /**
     * Gets the image with the specified text drawn on it using
     * the selected engine.
     * @param text the text to be drawn on the image
     * @param flavor the flavor of the image engine
     * @return image with the text generated by the engine
     */
    public final BufferedImage getImage(
            final String text, final String flavor) {

        if (text == null) {
            throw new IllegalArgumentException("Text must be provided.");
        }

        ImageEngine engine = (ImageEngine) mEngines.get(flavor);
        if (engine == null) {
            LOG.error("Image engine with flavor '"
                    + flavor
                    + "' is not available. "
                    + "Using the default image engine instead.");
            engine = new SimpleImageEngine();
        }

        return engine.getImage(text);
    }
}
